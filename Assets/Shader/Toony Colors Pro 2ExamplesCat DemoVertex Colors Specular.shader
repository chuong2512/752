Shader "Toony Colors Pro 2/Examples/Cat Demo/Vertex Colors Specular" {
	Properties {
		[TCP2HeaderHelp(BASE, Base Properties)] _Color ("Color", Vector) = (1,1,1,1)
		_HColor ("Highlight Color", Vector) = (0.785,0.785,0.785,1)
		_SColor ("Shadow Color", Vector) = (0.195,0.195,0.195,1)
		_MainTex ("Main Texture", 2D) = "white" {}
		[TCP2Separator] [TCP2Header(RAMP SETTINGS)] _RampThreshold ("Ramp Threshold", Range(0, 1)) = 0.5
		_RampSmooth ("Ramp Smoothing", Range(0.001, 1)) = 0.1
		[TCP2Separator] [TCP2HeaderHelp(EMISSION, Emission)] [HDR] _EmissionColor ("Emission Color", Vector) = (1,1,1,1)
		[TCP2Separator] [TCP2HeaderHelp(SPECULAR, Specular)] _SpecColor ("Specular Color", Vector) = (0.5,0.5,0.5,1)
		_Smoothness ("Roughness", Range(0, 1)) = 0.5
		[TCP2Separator] [TCP2HeaderHelp(RIM, Rim)] _RimColor ("Rim Color", Vector) = (0.8,0.8,0.8,0.6)
		_RimMin ("Rim Min", Range(0, 2)) = 0.5
		_RimMax ("Rim Max", Range(0, 2)) = 1
		[TCP2Separator] [HideInInspector] __dummy__ ("unused", Float) = 0
	}
	SubShader {
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 25048
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.w = 0.0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.w = 0.0;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
					    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
					    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD2.w;
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat22;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_12;
					    u_xlat16_2.xyz = vec3(u_xlat16_12) * _LightColor0.xyz;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_6.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat16_3.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat16_18 = u_xlat4.x + (-_RimMin);
					    u_xlat16_19 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_4.x = max(u_xlat16_19, 0.00100000005);
					    u_xlat16_19 = inversesqrt(u_xlat16_4.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_19) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_7.x = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_7.x = 2.0 / u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_7.x + -2.0;
					    u_xlat16_4.x = max(u_xlat16_7.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlat16_7.x = u_xlat16_4.x + 2.0;
					    u_xlat16_4.x = u_xlat16_7.x * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_4.x * u_xlat16_1.x;
					    u_xlat16_7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz;
					    u_xlat16_5.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;
					    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-_RimMin) + _RimMax;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat16_1.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_4.xyz * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
					    u_xlat22 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat16_4.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat10_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_9.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_9.x) + u_xlat16_1.x;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_17 = inversesqrt(u_xlat16_17);
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * vs_TEXCOORD1.xyz;
					    u_xlat16_17 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_17 = max(u_xlat16_17, 0.0);
					    u_xlat16_9.x = (-u_xlat16_9.x) + u_xlat16_17;
					    u_xlat16_3.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9.x;
					    u_xlat16_9.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_9.xyz = _SColor.www * u_xlat16_9.xyz + _HColor.xyz;
					    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_9.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_4.xyz = u_xlat5.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;
					    u_xlat24 = dot(u_xlat5.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_24 = max(u_xlat16_26, 0.00100000005);
					    u_xlat16_26 = inversesqrt(u_xlat16_24);
					    u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz;
					    u_xlat16_2.x = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4 = u_xlat16_4 * vs_COLOR0;
					    u_xlat16_10.x = (-_Smoothness) * u_xlat16_4.w + 1.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_10.x = 2.0 / u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_10.x + -2.0;
					    u_xlat16_24 = max(u_xlat16_10.x, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_24;
					    u_xlat16_10.x = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_10.x * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_24 * u_xlat16_2.x;
					    u_xlat16_10.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vs_COLOR0.www;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_25) * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					bool u_xlatb8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb8 = vs_TEXCOORD5.z<u_xlat8.x;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat8.x = max(u_xlat8.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat8.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat8.x;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD2.w;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = (-u_xlat24) + 1.0;
					    u_xlat16_25 = u_xlat24 + (-_RimMin);
					    u_xlat16_3.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_24 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_17 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_17 = 2.0 / u_xlat16_24;
					    u_xlat16_17 = u_xlat16_17 + -2.0;
					    u_xlat16_24 = max(u_xlat16_17, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_24;
					    u_xlat16_17 = u_xlat16_24 + 2.0;
					    u_xlat16_24 = u_xlat16_17 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat8.x = (-u_xlat0.x) + u_xlat8.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat8.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat8.xyz;
					    u_xlat8.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);
					    u_xlat16_8 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_8 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_3.x + u_xlat16_17;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_27 = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_5.xyz = vec3(u_xlat16_9) * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_9;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_9;
					    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;
					    u_xlat16_6.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_6.xyz = _SColor.www * u_xlat16_6.xyz + _HColor.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vs_COLOR0.www;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_3.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat24 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD2.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat2.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat3 = (-u_xlat2.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat2.yyyy) + unity_4LightPosY0;
					    u_xlat2 = (-u_xlat2.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat1.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = u_xlat3 * u_xlat1.xxxx + u_xlat5;
					    u_xlat3 = u_xlat2 * u_xlat1.zzzz + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat2);
					    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;
					    u_xlat3 = u_xlat3 * u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat3.xyz = u_xlat2.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat2.xyz = unity_LightColor[3].xyz * u_xlat2.www + u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_6.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_6.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD3.xyz = u_xlat2.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					bool u_xlatb2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = texture2D(_ShadowMapTexture, vs_TEXCOORD5.xy).x;
					    u_xlatb2 = vs_TEXCOORD5.z<u_xlat2.x;
					    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
					    u_xlat2.x = max(u_xlat2.x, _LightShadowData.x);
					    u_xlat16_19 = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_19 + u_xlat2.x;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD2.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat1.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
					    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat3;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
					    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
					    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump vec4 _EmissionColor;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump vec4 _SColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + vs_TEXCOORD3.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat16_1.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat16_28 = u_xlat27 + (-_RimMin);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_27 = max(u_xlat16_4.x, 0.00100000005);
					    u_xlat16_4.x = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_4.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_3 * vs_COLOR0;
					    u_xlat16_19 = (-_Smoothness) * u_xlat16_3.w + 1.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_19 = 2.0 / u_xlat16_27;
					    u_xlat16_19 = u_xlat16_19 + -2.0;
					    u_xlat16_27 = max(u_xlat16_19, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_27;
					    u_xlat16_19 = u_xlat16_27 + 2.0;
					    u_xlat16_27 = u_xlat16_19 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_27 * u_xlat16_1.x;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat2.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2.x = sqrt(u_xlat2.x);
					    u_xlat2.x = (-u_xlat27) + u_xlat2.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat2.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					    u_xlat16_2.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_19 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19 + _LightShadowData.x;
					    u_xlat16_4.x = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = u_xlat27 * u_xlat16_4.x + u_xlat16_19;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_31 = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_6.xyz = vec3(u_xlat16_10) * _LightColor0.xyz;
					    u_xlat16_6.xyz = vec3(u_xlat16_19) * u_xlat16_6.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_10;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_31;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_19 * u_xlat16_1.x;
					    u_xlat16_7.xyz = (-_HColor.xyz) + _SColor.xyz;
					    u_xlat16_7.xyz = _SColor.www * u_xlat16_7.xyz + _HColor.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * vs_COLOR0.www;
					    u_xlat16_8.xyz = u_xlat16_7.xyz * _LightColor0.xyz;
					    u_xlat16_1.xyz = u_xlat16_8.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.x = (-_RimMin) + _RimMax;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
					#else
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = _EmissionColor.www * _EmissionColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 82491
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
					#else
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
					#else
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
					#else
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = 2.0 / u_xlat16_0.x;
					    u_xlat16_1 = u_xlat16_1 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1, 9.99999975e-05);
					    u_xlat16_1 = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1 * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1 = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1 * -2.0 + 3.0;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_1) * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_11;
					float u_xlat15;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat16_1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_16 = u_xlat0.x + (-_RimMin);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_0.x = max(u_xlat16_2.x, 0.00100000005);
					    u_xlat16_2.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_2.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_1.x = dot(u_xlat16_2.xyz, u_xlat16_1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = dot(u_xlat16_2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6 = max(u_xlat16_6, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_11 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _LightColor0.xyz;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_11 = 2.0 / u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_11 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_11, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_0.x;
					    u_xlat16_11 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_11 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x;
					    u_xlat16_3.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_11 = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_4.xyz = vec3(u_xlat16_6) * _LightColor0.xyz;
					    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _HColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.x = (-_RimMin) + _RimMax;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_1.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					bool u_xlatb7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_16 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_16 = u_xlat0.x * u_xlat16_16;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_8;
					mediump float u_xlat16_14;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_18 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_18);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_8 = max(u_xlat16_8, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_14 = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_14 = u_xlat18 * u_xlat16_14;
					    u_xlat16_14 = u_xlat0.x * u_xlat16_14;
					    u_xlat16_4.xyz = vec3(u_xlat16_14) * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_14;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
					#else
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat7 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_16;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_2.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = max(u_xlat16_3.x, 0.00100000005);
					    u_xlat16_3.x = inversesqrt(u_xlat16_21);
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
					    u_xlat16_3.xyz = u_xlat16_3.xxx * vs_TEXCOORD1.xyz;
					    u_xlat16_2.x = dot(u_xlat16_3.xyz, u_xlat16_2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
					    u_xlat16_9 = max(u_xlat16_9, 0.0);
					    u_xlat16_2.x = log2(u_xlat16_2.x);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_16 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_16 = 2.0 / u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_16 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_16, 9.99999975e-05);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_16 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_16 * 0.159154937;
					    u_xlat16_2.x = exp2(u_xlat16_2.x);
					    u_xlat16_2.x = u_xlat16_0.x * u_xlat16_2.x;
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat16_2.x = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_16 = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_6.xyz = vec3(u_xlat16_9) * u_xlat16_4.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_9 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_2.x = (-u_xlat16_2.x) + u_xlat16_9;
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_16;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_2.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_12;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					float u_xlat20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat16_0.x = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_6 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_0.x = (-u_xlat16_6) + u_xlat16_0.x;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_12 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_12 = inversesqrt(u_xlat16_12);
					    u_xlat16_1.xyz = vec3(u_xlat16_12) * vs_TEXCOORD1.xyz;
					    u_xlat16_12 = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_12 = max(u_xlat16_12, 0.0);
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_12;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = u_xlat16_0.x * -2.0 + 3.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_0.xyw = u_xlat16_0.xxx * _HColor.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat20) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_19 = u_xlat2.x + (-_RimMin);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_2.x = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_2.x);
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2 = u_xlat16_2 * vs_COLOR0;
					    u_xlat16_7 = (-_Smoothness) * u_xlat16_2.w + 1.0;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _Color.xyz;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_7;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_7 = 2.0 / u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_7 + -2.0;
					    u_xlat16_2.x = max(u_xlat16_7, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_2.x;
					    u_xlat16_7 = u_xlat16_2.x + 2.0;
					    u_xlat16_2.x = u_xlat16_7 * 0.159154937;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_2.x * u_xlat16_1.x;
					    u_xlat2.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_4.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat16_12) * u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_0.xyw + u_xlat16_1.xyz;
					    u_xlat16_18 = (-_RimMin) + _RimMax;
					    u_xlat16_18 = float(1.0) / u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_19;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat16_18 * -2.0 + 3.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_0.xyz;
					    u_xlat2.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xxx;
					    SV_Target0.xyz = u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_13;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_7 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_13 = (-u_xlat16_7) + 1.0;
					    u_xlat16_7 = u_xlat0.x * u_xlat16_13 + u_xlat16_7;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					bool u_xlatb7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz / vs_TEXCOORD4.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb7 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_10 = (u_xlatb7) ? 1.0 : 0.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_10;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat21 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_7 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_7 + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat0.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_9 = u_xlat7.x * u_xlat16_9 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat0.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
					#else
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					#endif
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_17 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_17 = u_xlat16_7 * u_xlat16_17 + _LightShadowData.x;
					    u_xlat16_24 = (-u_xlat16_17) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_24 + u_xlat16_17;
					    u_xlat16_5.xyz = vec3(u_xlat16_17) * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					bool u_xlatb7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_10;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_17;
					mediump float u_xlat16_24;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_1.x = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = 2.0 / u_xlat16_0.x;
					    u_xlat16_1.x = u_xlat16_1.x + -2.0;
					    u_xlat16_0.x = max(u_xlat16_1.x, 9.99999975e-05);
					    u_xlat16_1.x = u_xlat16_0.x + 2.0;
					    u_xlat16_7 = u_xlat16_1.x * 0.159154937;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat14) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat14 = dot(u_xlat4.xyz, vs_TEXCOORD1.xyz);
					    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
					    u_xlat14 = (-u_xlat14) + 1.0;
					    u_xlat16_1.x = u_xlat14 + (-_RimMin);
					    u_xlat16_24 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_14 = max(u_xlat16_24, 0.00100000005);
					    u_xlat16_24 = inversesqrt(u_xlat16_14);
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_5.xyz = vec3(u_xlat16_24) * vs_TEXCOORD1.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, u_xlat16_3.xyz);
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = max(u_xlat16_10, 0.0);
					    u_xlat16_3.x = log2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = exp2(u_xlat16_3.x);
					    u_xlat16_3.x = u_xlat16_7 * u_xlat16_3.x;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat7.x = texture2D(_ShadowMapTexture, vs_TEXCOORD4.xy).x;
					    u_xlatb7 = vs_TEXCOORD4.z<u_xlat7.x;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat7.x = max(u_xlat7.x, _LightShadowData.x);
					    u_xlat16_17 = (-u_xlat7.x) + 1.0;
					    u_xlat16_17 = u_xlat0.x * u_xlat16_17 + u_xlat7.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat0.x = u_xlat16_17 * u_xlat0.x;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * _SpecColor.xyz;
					    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_26 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = u_xlat16_10 + (-u_xlat16_26);
					    u_xlat16_13.xyz = vec3(u_xlat16_10) * u_xlat16_5.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_10 = (-u_xlat16_26) + u_xlat16_10;
					    u_xlat16_10 = float(1.0) / u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_6.x;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_5.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_10) * _HColor.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;
					    u_xlat16_3.x = (-_RimMin) + _RimMax;
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_13.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_8.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_22;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat7.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD2.xxx + u_xlat7.xyz;
					    u_xlat7.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD2.zzz + u_xlat7.xyz;
					    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat7.xy,u_xlat7.z);
					    u_xlat16_7 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_7 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_8 = (-u_xlat16_1.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat7.x * u_xlat16_8 + u_xlat16_1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat16_5.xyz = u_xlat3.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_22 = u_xlat0.x + (-_RimMin);
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_0.x);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_22 * -2.0 + 3.0;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;
					    u_xlat16_22 = u_xlat16_22 * u_xlat16_25;
					    u_xlat16_1.xyz = vec3(u_xlat16_22) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat18 = max(abs(u_xlat0.z), u_xlat18);
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.z);
					    u_xlat18 = max(u_xlat18, 9.99999975e-06);
					    u_xlat18 = u_xlat18 * _LightProjectionParams.w;
					    u_xlat18 = _LightProjectionParams.y / u_xlat18;
					    u_xlat18 = u_xlat18 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat18);
					    u_xlat16_0.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0.x * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_7 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat6.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_7 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat2.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_19 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * -2.0 + 3.0;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_21;
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat6.x = sqrt(u_xlat18);
					    u_xlat6.x = u_xlat6.x * _LightPositionRange.w;
					    u_xlat6.x = u_xlat6.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat6.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_8 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_8 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat16_4.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_18 = max(u_xlat16_21, 0.00100000005);
					    u_xlat16_21 = inversesqrt(u_xlat16_18);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
					    u_xlat16_21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_21) * vs_TEXCOORD1.xyz;
					    u_xlat16_21 = dot(u_xlat16_5.xyz, u_xlat16_4.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = dot(u_xlat16_5.xyz, u_xlat0.xyz);
					    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);
					    u_xlat16_21 = log2(u_xlat16_21);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_10 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_10 = 2.0 / u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_10 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_10, 9.99999975e-05);
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_0.x;
					    u_xlat16_10 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_10 * 0.159154937;
					    u_xlat16_21 = exp2(u_xlat16_21);
					    u_xlat16_21 = u_xlat16_0.x * u_xlat16_21;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_4.x = (-u_xlat16_21) + u_xlat16_4.x;
					    u_xlat16_10 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_21 = (-u_xlat16_21) + u_xlat16_10;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * _HColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_21 = (-_RimMin) + _RimMax;
					    u_xlat16_21 = float(1.0) / u_xlat16_21;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;
					    u_xlat16_2.xyz = vec3(u_xlat16_20) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_3.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_7;
					mediump float u_xlat16_9;
					mediump float u_xlat16_12;
					float u_xlat14;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_23;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat7.x = texture(_LightTextureB0, vec2(u_xlat21)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat7.x;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat7.y), abs(u_xlat7.x));
					    u_xlat1.x = max(abs(u_xlat7.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat7.xyz,u_xlat1.x);
					    u_xlat16_7 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_9 = (-u_xlat16_2.x) + 1.0;
					    u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat7.x = sqrt(u_xlat7.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat14 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-u_xlat14) + u_xlat7.x;
					    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat14;
					    u_xlat7.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
					#else
					    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat7.x * u_xlat16_9 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_23 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_23 = min(max(u_xlat16_23, 0.0), 1.0);
					#else
					    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_23 * -2.0 + 3.0;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;
					    u_xlat16_23 = u_xlat16_23 * u_xlat16_25;
					    u_xlat16_2.xyz = vec3(u_xlat16_23) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp samplerCube _ShadowMapTexture;
					varying mediump vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump float u_xlat16_12;
					mediump float u_xlat16_14;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = sqrt(u_xlat24);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat24));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_12 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_12 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_29 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_24 = max(u_xlat16_29, 0.00100000005);
					    u_xlat16_29 = inversesqrt(u_xlat16_24);
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * u_xlat16_6.xyz;
					    u_xlat16_29 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_29 = inversesqrt(u_xlat16_29);
					    u_xlat16_7.xyz = vec3(u_xlat16_29) * vs_TEXCOORD1.xyz;
					    u_xlat16_29 = dot(u_xlat16_7.xyz, u_xlat16_6.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = dot(u_xlat16_7.xyz, u_xlat0.xyz);
					    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);
					    u_xlat16_29 = log2(u_xlat16_29);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;
					    u_xlat16_14 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_7.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_14 = 2.0 / u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_14 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_14, 9.99999975e-05);
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_0.x;
					    u_xlat16_14 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_14 * 0.159154937;
					    u_xlat16_29 = exp2(u_xlat16_29);
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_5.xyz = vec3(u_xlat16_29) * u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_6.x = (-u_xlat16_29) + u_xlat16_6.x;
					    u_xlat16_14 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_29 = (-u_xlat16_29) + u_xlat16_14;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat16_6.x = u_xlat16_29 * -2.0 + 3.0;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * u_xlat16_6.x;
					    u_xlat16_6.xyz = vec3(u_xlat16_29) * _HColor.xyz;
					    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
					    u_xlat16_29 = (-_RimMin) + _RimMax;
					    u_xlat16_29 = float(1.0) / u_xlat16_29;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
					    u_xlat16_29 = u_xlat16_28 * -2.0 + 3.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_29;
					    u_xlat16_4.xyz = vec3(u_xlat16_28) * u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.www + u_xlat16_5.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out mediump vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD0.xy = u_xlat1.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _SpecColor;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Smoothness;
					uniform 	mediump vec4 _RimColor;
					uniform 	mediump float _RimMin;
					uniform 	mediump float _RimMax;
					uniform 	mediump vec4 _HColor;
					uniform 	mediump float _RampThreshold;
					uniform 	mediump float _RampSmooth;
					uniform mediump sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in mediump vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_12;
					float u_xlat21;
					mediump float u_xlat16_21;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-_LightPositionRange.xyz);
					    u_xlat21 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat21 = max(abs(u_xlat0.z), u_xlat21);
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.z);
					    u_xlat21 = max(u_xlat21, 9.99999975e-06);
					    u_xlat21 = u_xlat21 * _LightProjectionParams.w;
					    u_xlat21 = _LightProjectionParams.y / u_xlat21;
					    u_xlat21 = u_xlat21 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat21);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat21);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat21);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_10 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = u_xlat16_3.xyz * _SpecColor.xyz;
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat21) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, vs_TEXCOORD1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_24 = u_xlat0.x + (-_RimMin);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_21 = max(u_xlat16_25, 0.00100000005);
					    u_xlat16_25 = inversesqrt(u_xlat16_21);
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * u_xlat16_5.xyz;
					    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
					    u_xlat16_25 = inversesqrt(u_xlat16_25);
					    u_xlat16_6.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
					    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
					    u_xlat16_25 = log2(u_xlat16_25);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
					    u_xlat16_12 = (-_Smoothness) * u_xlat16_0.w + 1.0;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz;
					    u_xlat16_6.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xxx;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_12 = 2.0 / u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_12 + -2.0;
					    u_xlat16_0.x = max(u_xlat16_12, 9.99999975e-05);
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_0.x;
					    u_xlat16_12 = u_xlat16_0.x + 2.0;
					    u_xlat16_0.x = u_xlat16_12 * 0.159154937;
					    u_xlat16_25 = exp2(u_xlat16_25);
					    u_xlat16_25 = u_xlat16_0.x * u_xlat16_25;
					    u_xlat16_4.xyz = vec3(u_xlat16_25) * u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RampSmooth) * 0.5 + _RampThreshold;
					    u_xlat16_5.x = (-u_xlat16_25) + u_xlat16_5.x;
					    u_xlat16_12 = _RampSmooth * 0.5 + _RampThreshold;
					    u_xlat16_25 = (-u_xlat16_25) + u_xlat16_12;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_25 = min(max(u_xlat16_25, 0.0), 1.0);
					#else
					    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);
					#endif
					    u_xlat16_5.x = u_xlat16_25 * -2.0 + 3.0;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_25 = u_xlat16_25 * u_xlat16_5.x;
					    u_xlat16_5.xyz = vec3(u_xlat16_25) * _HColor.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_25 = (-_RimMin) + _RimMax;
					    u_xlat16_25 = float(1.0) / u_xlat16_25;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_25 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_25;
					    u_xlat16_3.xyz = vec3(u_xlat16_24) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.www + u_xlat16_4.xyz;
					    u_xlat0.x = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "FOG_LINEAR" }
					"!!!!GLES3"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			Tags { "LIGHTMODE" = "SHADOWCASTER" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 137096
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					#define SV_Target0 gl_FragData[0]
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					#define SV_Target0 gl_FragData[0]
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					#define SV_Target0 gl_FragData[0]
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat6 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat6);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat6;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_LightShadowBias;
					varying highp vec3 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = min(u_xlat0.x, 0.999000013);
					    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_LightShadowBias;
					varying highp vec3 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = min(u_xlat0.x, 0.999000013);
					    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 unity_LightShadowBias;
					varying highp vec3 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
					    u_xlat0.x = min(u_xlat0.x, 0.999000013);
					    u_xlat0 = u_xlat0.xxxx * vec4(1.0, 255.0, 65025.0, 16581375.0);
					    u_xlat0 = fract(u_xlat0);
					    u_xlat0 = (-u_xlat0.yzww) * vec4(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat9 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat9 = sqrt(u_xlat9);
					    u_xlat9 = u_xlat9 * unity_LightShadowBias.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(u_xlat9) + u_xlat1.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb9 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
					    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat2;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" }
					"!!!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" }
					"!!!!GLES3"
				}
			}
		}
		Pass {
			Name "Meta"
			Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" }
			Cull Off
			GpuProgramID 200765
		}
	}
	Fallback "Diffuse"
	CustomEditor "TCP2_MaterialInspector_SG"
}